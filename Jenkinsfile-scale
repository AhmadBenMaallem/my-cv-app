pipeline {
    agent any
    environment {
        IMAGE = "abmtrigger"
        STACK_NAME = "trigger_my-cv-app_deployment"
    }
    parameters {
        string(name: 'NB_CONTAINERS', defaultValue: '1', description: 'Number of containers to scale for myapp')
    }
    stages {

        stage('Clone') {
            steps {
                checkout scm
            }
        }

         stage('Check Running Container Tag') {
            steps {
                script {
                    // Get the running container tag using bash -c
                    def runningTag = sh(
                        script: """
                        bash -c "docker ps --format '{{.Image}}' | grep '${IMAGE}:' | cut -d':' -f2 | head -n 1"
                        """,
                        returnStdout: true
                    ).trim()
                    
                    // Check if the tag exists
                    if (runningTag) {
                        env.TAG = runningTag // Save to env.TAG
                        echo "Currently running container is using tag: ${TAG} "
                        
                    } else {
                        echo "No running container found for the image: ${IMAGE}"
                        error "No running container found for the specified image. Exiting pipeline."
                    }
                }
            }
        }


        stage('PRE-Deployment') {
            steps {
                sh "sed -i 's|IMAGE_TAG|${IMAGE}:${TAG}|g' docker-compose.yml"
                sh "mkdir ${STACK_NAME} || true"
                sh "mv docker-compose.yml ${STACK_NAME}"
                
            }
        }

        stage('Scale my app') {
            when {
                expression {
                    return params.NB_CONTAINERS?.isInteger() && params.NB_CONTAINERS.toInteger() > 0
                }
            }
            steps {
                script {
                    sh "docker-compose -f ${STACK_NAME}/docker-compose.yml scale myapp=${params.NB_CONTAINERS}"
                }
            }
        }

        stage('Reload Nginx Container') {
            steps {
                script {
                    sh "docker-compose -f ${STACK_NAME}/docker-compose.yml exec -T nginx nginx -s reload"
                }
            }
        }
        
        stage('Clean Temp Dir') {
            steps {
                script {
                    sh "rm -rf ${STACK_NAME} || true"
                }
            }
        }
        
    }
}