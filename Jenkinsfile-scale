pipeline {
    agent any
    environment {
        IMAGE = "abmtrigger"
        TAG = "latest" // Default value for TAG
    }
    stages {

        stage('Clone') {
            steps {
                checkout scm
            }
        }

         stage('Check Running Container Tag') {
            steps {
                script {
                    // List running containers and filter based on image name
                    def runningTag = sh(
                        script: "docker ps --format '{{.Image}}' | grep -oP '${IMAGE}:\K.*'",
                        returnStdout: true
                    ).trim()
                    
                    if (runningTag) {
                        echo "Currently running container is using tag: ${runningTag}"
                        env.TAG = runningTag
                    } else {
                         echo "No running container found for the image: ${IMAGE}"
                         error "No running container found for the specified image. Exiting pipeline."
                    }
                }
            }
        }


        stage('PRE-Deployment') {
            steps {
                sh "sed -i 's|IMAGE_TAG|${IMAGE}:${TAG}|g' docker-compose.yml"
            }
        }

        stage('Scale my app') {
            when {
                expression {
                    return params.NB_CONTAINERS?.isInteger() && params.NB_CONTAINERS.toInteger() > 0
                }
            }
            steps {
                script {
                    sh "docker-compose scale myapp=${params.NB_CONTAINERS}"
                }
            }
        }

        stage('Reload Nginx Container') {
            steps {
                script {
                    sh "docker-compose exec -T nginx nginx -s reload"
                }
            }
        }
    }
}
